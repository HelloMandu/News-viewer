{"version":3,"sources":["components/NewsItem.js","components/NewsList.js","lib/usePromise.js","components/Categories.js","pages/NewsPage.js","App.js","serviceWorker.js","index.js"],"names":["NewsItemBlock","styled","div","NewsItem","article","title","description","url","urlToImage","className","href","target","rel","src","alt","NewsListBlock","NewsList","category","promiseCreator","deps","useState","loading","setLoading","resolved","setResolved","error","setError","useEffect","a","fetchData","usePromise","query","axios","get","response","articles","data","map","key","categories","name","text","CategoriesBlock","Category","NavLink","Categories","c","activeClassName","exact","to","App","match","params","path","component","NewsPage","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.dac10f1d.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst NewsItemBlock = styled.div`\r\ndisplay: flex;\r\n.thumbnail {\r\n  margin-right: 1rem;\r\n  img {\r\n    display: block;\r\n    width: 160px;\r\n    height: 100px;\r\n    object-fit: cover;\r\n  }\r\n}\r\n.contents {\r\n  h2 {\r\n    margin: 0;\r\n    a {\r\n      color: black;\r\n    }\r\n  }\r\n  p {\r\n    margin: 0;\r\n    line-height: 1.5;\r\n    margin-top: 0.5rem;\r\n    white-space: normal;\r\n  }\r\n}\r\n& + & {\r\n  margin-top: 3rem;\r\n}\r\n`;\r\n\r\nconst NewsItem = ({article})=>{\r\n    const {title, description, url, urlToImage} = article;\r\n    return (\r\n        <NewsItemBlock>\r\n            {urlToImage &&(\r\n                <div className=\"thumbnail\">\r\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <img src={urlToImage} alt=\"thumbnail\"/>\r\n                    </a>\r\n                </div>\r\n            )}\r\n            <div className=\"contents\">\r\n                <h2>\r\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{title}</a>\r\n                </h2>\r\n                <p>{description}</p>\r\n            </div>\r\n        </NewsItemBlock>\r\n    )\r\n}\r\n\r\nexport default NewsItem;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport NewsItem from './NewsItem';\r\nimport usePromise from '../lib/usePromise'\r\nimport axios from 'axios';\r\n\r\nconst NewsListBlock = styled.div`\r\n  box-sizing: border-box;\r\n  padding-bottom: 3rem;\r\n  width: 768px;\r\n  margin: 0 auto;\r\n  margin-top: 2rem;\r\n  @media screen and (max-width: 768px) {\r\n    width: 100%;\r\n    padding-left: 1rem;\r\n    padding-right: 1rem;\r\n  }\r\n`;\r\n\r\nconst NewsList = ({category}) => {\r\n  const [loading, response, error] = usePromise(()=>{\r\n    const query = (category === 'all' ? '' : `&category=${category}`);\r\n    return axios.get(`https://newsapi.org/v2/top-headlines?country=kr${query}&apiKey=dabeec94a62a4c2688397e5a0f0f56dc`);\r\n  }, [category])\r\n  if(loading){\r\n    return <NewsListBlock>대기중...</NewsListBlock>;\r\n  }\r\n  else if(!response){\r\n    return null\r\n  }\r\n  else if(error){\r\n    return <NewsListBlock>에러</NewsListBlock>;\r\n  }\r\n  const { articles } = response.data;\r\n  return (\r\n    <NewsListBlock>\r\n      {articles.map(article=>(\r\n        <NewsItem key={article.url} article={article} />\r\n      ))}\r\n    </NewsListBlock>\r\n  );\r\n};\r\n\r\nexport default NewsList;","import { useState, useEffect } from \"react\";\r\n\r\nexport default function usePromise(promiseCreator, deps) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [resolved, setResolved] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const resolved = await promiseCreator();\r\n        setResolved(resolved);\r\n      } catch (e) {\r\n        setError(e);\r\n      }\r\n      setLoading(false);\r\n    };\r\n    fetchData();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, deps);\r\n  return [loading, resolved, error];\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst categories = [\r\n    {\r\n        name: 'all',\r\n        text: '전체보기',\r\n      },\r\n      {\r\n        name: 'business',\r\n        text: '비즈니스',\r\n      },\r\n      {\r\n        name: 'entertainment',\r\n        text: '엔터테인먼트',\r\n      },\r\n      {\r\n        name: 'health',\r\n        text: '건강',\r\n      },\r\n      {\r\n        name: 'science',\r\n        text: '과학',\r\n      },\r\n      {\r\n        name: 'sports',\r\n        text: '스포츠',\r\n      },\r\n      {\r\n        name: 'technology',\r\n        text: '기술',\r\n      },\r\n];\r\n\r\nconst CategoriesBlock = styled.div`\r\n  display: flex;\r\n  padding: 1rem;\r\n  width: 768px;\r\n  margin: 0 auto;\r\n  @media screen and (max-width: 768px) {\r\n    width: 100%;\r\n    overflow-x: auto;\r\n  }\r\n`;\r\n\r\nconst Category = styled(NavLink)`\r\n  font-size: 1.125rem;\r\n  cursor: pointer;\r\n  white-space: pre;\r\n  text-decoration: none;\r\n  color: inherit;\r\n  padding-bottom: 0.25rem;\r\n  &:hover {\r\n    color: #495057;\r\n  }\r\n  &.active {\r\n    font-weight: 600;\r\n    border-bottom: 2px solid #22b8cf;\r\n    color: #22b8cf;\r\n    &:hover {\r\n      color: #3bc9db;\r\n    }\r\n  }\r\n  & + & {\r\n    margin-left: 1rem;\r\n  }\r\n`;\r\n\r\nconst Categories = ()=>{\r\n    return(\r\n        <CategoriesBlock>\r\n            {categories.map(c=>(\r\n                <Category \r\n                key={c.name}\r\n                activeClassName=\"active\"\r\n                exact={c.name === 'all'}\r\n                to={c.name === 'all' ? '/' : `${c.name}`}\r\n                >\r\n                {c.text}\r\n                </Category>\r\n            ))}\r\n        </CategoriesBlock>\r\n    )\r\n}\r\n\r\nexport default Categories;","import React from 'react';\r\nimport NewsList from '../components/NewsList';\r\nimport Categories from '../components/Categories';\r\n\r\nconst App = ({ match }) => {\r\n    const category = match.params.category || 'all';\r\n    return (\r\n        <div>\r\n            <Categories></Categories>\r\n            <NewsList category={category}></NewsList>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport NewsPage from './pages/NewsPage';\n\nconst App = () => {\n  return (\n    <Route path=\"/:category?\" component={NewsPage}></Route>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}